#!/usr/bin/env Rscript
#
# Copyright (c) 2017 Trevor L. Davis <trevor.l.davis@gmail.com>  
#  
# This file is free software: you may copy, redistribute and/or modify it  
# under the terms of the GNU General Public License as published by the  
# Free Software Foundation, either version 2 of the License, or (at your  
# option) any later version.  
# 
# This file is distributed in the hope that it will be useful, but  
# WITHOUT ANY WARRANTY; without even the implied warranty of  
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  
# General Public License for more details.  
# 
# You should have received a copy of the GNU General Public License  
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  
#  
suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library("scales"))
suppressPackageStartupMessages(library("stringr"))

main <- function() {
    
    parser <- OptionParser(description = "A command line program to drill production and recognition of pinyin.  The program will continually question you until you quit.  Quit with a q<ENTER>.")
    parser <- add_option(parser, c("-i", "--initial"), default='*', 
                         help = "Possible initials of at least one syllable (separate with ',').  Use \"'\" for no-initial and '*' for all [default '%default'].  Run ``pinyin_drill`` with ``--list_initials`` option for list of all recognized initials.  Currently only checks the first four syllables.")
    parser <- add_option(parser, c("-f", "--final"), default='*', 
                         help = "Possible finals of at least one syllable (separate with ','). ü is denoted by a v; the three different i finals are denoted i, r, and z respectively; the 'er syllable is usually denoted ar, and '*' means all [default '%default']. Run ``pinyin_drill`` with ``--list_finals`` option for list of all recognized finals including erhua finals and interjection syllables.  Currently only checks the first four syllables.")
    parser <- add_option(parser, c("-t", "--tone"), default='*', 
                         help = "Possible tones of at least one syllable (separate with ','), represent neutral tone with a 5, '*' means all [default '%default'].  Currently only checks the first four syllables.")
    parser <- add_option(parser, c("-p", "--pinyin"), default="*",
                        help = "Possible pinyin of at least one syllable (separate with ',' with tone number optional at the end).  Represent ü with a v and the rare ê with an eh. '*' means any [default '%default'].")
    parser <- add_option(parser, c("--initial1"), default='*', 
                         help = "Possible initials of first syllable [default '%default'].")
    parser <- add_option(parser, c("--final1"), default='*', 
                         help = "Possible finals of first syllable [default '%default']")
    parser <- add_option(parser, c("--tone1"), default='*', 
                         help = "Possible tones of first syllable [default '%default']")
    parser <- add_option(parser, c("--pinyin1"), default='*', 
                         help = "Possible pinyin of first syllable [default '%default']")
    parser <- add_option(parser, c("--initial2"), default='*', 
                         help = "Possible initials of second syllable [default '%default']")
    parser <- add_option(parser, c("--final2"), default='*', 
                         help = "Possible finals of second syllable [default '%default']")
    parser <- add_option(parser, c("--tone2"), default='*', 
                         help = "Possible tones of second syllable [default '%default']")
    parser <- add_option(parser, c("--pinyin2"), default='*', 
                         help = "Possible pinyin of second syllable [default '%default']")
    parser <- add_option(parser, c("--initial3"), default='*', 
                         help = "Possible initials of third syllable [default '%default']")
    parser <- add_option(parser, c("--final3"), default='*', 
                         help = "Possible finals of third syllable [default '%default']")
    parser <- add_option(parser, c("--tone3"), default='*', 
                         help = "Possible tones of third syllable [default '%default']")
    parser <- add_option(parser, c("--pinyin3"), default='*', 
                         help = "Possible pinyin of third syllable [default '%default']")
    parser <- add_option(parser, c("--initial4"), default='*', 
                         help = "Possible initials of fourth syllable [default '%default']")
    parser <- add_option(parser, c("--final4"), default='*', 
                         help = "Possible finals of fourth syllable [default '%default']")
    parser <- add_option(parser, c("--tone4"), default='*', 
                         help = "Possible tones of fourth syllable [default '%default']")
    parser <- add_option(parser, c("--pinyin4"), default='*', 
                         help = "Possible pinyin of fourth syllable [default '%default']")
    parser <- add_option(parser, c("-n", "--nsyllables"), default='*', 
                         help = "Number of syllables audio should have (separate with ','), '*' means any [default '%default']")
    parser <- add_option(parser, c("-d", "--display_pinyin_first"), default=FALSE, 
                         action="store_true", help = "Display pinyin before playing media [default %default]")
    parser <- add_option(parser, c("-a", "--audio_dir"), default = "audio",
                         help = "Audio directory [default %default]")
    parser <- add_option(parser, c("--filter"), default = "*",
                         help = "Additional regular expression to filter the files/subdirectories on [default %default]")
    parser <- add_option(parser, c("-l", "--list_audio"), default = FALSE, action="store_true",
                         help = "Just print audio files that match filters and quit")
    parser <- add_option(parser, c("--list_finals"), default = FALSE, action="store_true",
                         help = "Just print the finals recognized by program and quit")
    parser <- add_option(parser, c("--list_initials"), default = FALSE, action="store_true",
                         help = "Just print the initials recognized by program and quit")

    if (interactive()) {
        args <- c()
        opts <- parse_args(parser, args)
    } else {
        opts <- parse_args(parser)
    }

    audio_info <- get_filtered_audio_info(opts)

    if (nrow(audio_info) == 0) {
        no_audio(opts$audio_dir)
    }
    if (opts$list_audio) {
        cat(audio_info$audio, sep="\n")
        quit('no')
    }       
    if (opts$list_finals) {
        finals <- read.csv(text = final_table_text)
        for (ii in 1:nrow(finals)) {
            final <- finals[ii,1]
            ipa <- finals[ii,2]
            example <- finals[ii,3]
            note <- finals[ii,4]
            cat(final, '\t', ipa, '\t', example, '\t', note, '\n')
        }
        quit('no')
    }       
    if (opts$list_initials) {
        initials <- read.csv(text = initial_table_text)
        for (ii in 1:nrow(initials)) {
            initial <- initials[ii,1]
            ipa <- initials[ii,2]
            example <- initials[ii,3]
            note <- initials[ii,4]
            cat(initial, '\t', ipa, '\t', example, '\t', note, '\n')
        }
        quit('no')
    }       

    correct <- vector("numeric")
    system("clear")
    while(TRUE) {

        ii <- sample.int(nrow(audio_info), 1)
        media_file <- audio_info[ii, "audio"]
        ascii_pinyin <- audio_info[ii, "pinyin"]
        deconstruction <- audio_info[ii, "deconstruction"]
        pinyin <- clean_pinyin(ascii_pinyin)
        # ipa <- audio_info[ii, "ipa"]
        ipa <- get_ipa(ascii_pinyin)

        if (opts$display_pinyin_first) {
            cat("\nPinyin: ", ascii_pinyin, '/', pinyin)
            cat("\nPress <ENTER> when ready to play media (or q<ENTER> to quit)\n")
            get_input()
            play_media(media_file)
        } else {
            play_media(media_file)
            cat("\nPinyin: ", ascii_pinyin, '/', pinyin)
        }
        cat("\nIPA: ", ipa)
        cat("\nInitial-Final Deconstruction: ", deconstruction)
        cat("\nMedia file: ", media_file)
        cat("\n\nDid you get it right (y/n/q)?\n")
        ans <- get_input()
        if (ans == "y")
            correct <- append(correct, 1)
        else
            correct <- append(correct, 0)
        percent_today <- scales::percent(mean(correct))
        percent_last_ten <- scales::percent(mean(tail(correct, 10)))

        system("clear")
        cat(percent_today, "correct this session, ", percent_last_ten, "correct last ten", "\n")
    }

}

no_audio <- function(audio_dir) {
        cat("\nNo audio found in the directory", shQuote(audio_dir), "matching your request.  Did you forget to set the --audio_dir option?\n\n")
        quit('no')
}

get_input <- function() { 
    con <- file("stdin")
    input <- tolower(readLines(con, 1))
    close(con)    
    if (input == "q") { quit('no') }
    input
}

play_media <- function(media_file) {
    ans <- "r"
    cat("\nPress <ENTER> to reveal the answer, r<ENTER> to replay, or q<ENTER> to quit\n")
    while(ans == "r") {
        system(paste("cvlc --no-video --ignore-config --quiet --play-and-exit", media_file, "2> /dev/null"))
        ans <- get_input()
    }
}

replace_with_na <- function(x, index) { 
    if (ncol(x) < index) { return(rep(NA, nrow(x))) }
    ifelse(x[,index] == "", NA, x[,index])
}

get_filtered_audio_info <- function(opts) {
    t_initial <- tolower(str_split(opts$initial, ",", simplify=TRUE))
    t_final <- tolower(str_split(opts$final, ",", simplify=TRUE))
    t_tone <- tolower(str_split(opts$tone, ",", simplify=TRUE))
    t_pinyin <- tolower(str_split(opts$pinyin, ",", simplify=TRUE))
    t_initial1 <- tolower(str_split(opts$initial1, ",", simplify=TRUE))
    t_final1 <- tolower(str_split(opts$final1, ",", simplify=TRUE))
    t_tone1 <- tolower(str_split(opts$tone1, ",", simplify=TRUE))
    t_pinyin1 <- tolower(str_split(opts$pinyin1, ",", simplify=TRUE))
    t_initial2 <- tolower(str_split(opts$initial2, ",", simplify=TRUE))
    t_final2 <- tolower(str_split(opts$final2, ",", simplify=TRUE))
    t_tone2 <- tolower(str_split(opts$tone2, ",", simplify=TRUE))
    t_pinyin2 <- tolower(str_split(opts$pinyin2, ",", simplify=TRUE))
    t_initial3 <- tolower(str_split(opts$initial3, ",", simplify=TRUE))
    t_final3 <- tolower(str_split(opts$final3, ",", simplify=TRUE))
    t_tone3 <- tolower(str_split(opts$tone3, ",", simplify=TRUE))
    t_pinyin3 <- tolower(str_split(opts$pinyin3, ",", simplify=TRUE))
    t_initial4 <- tolower(str_split(opts$initial4, ",", simplify=TRUE))
    t_final4 <- tolower(str_split(opts$final4, ",", simplify=TRUE))
    t_tone4 <- tolower(str_split(opts$tone4, ",", simplify=TRUE))
    t_pinyin4 <- tolower(str_split(opts$pinyin4, ",", simplify=TRUE))
    t_nsyllables <- tolower(str_split(opts$nsyllables, ",", simplify=TRUE))
    t_filter <- opts$filter


    audio_info <- get_audio_info(opts$audio_dir)

    if (any(t_initial != '*')) { audio_info <- audio_info %>% filter(initial1 %in% t_initial | initial2 %in% t_initial | initial3 %in% t_initial | initial4 %in% t_initial) }
    if (any(t_final != '*')) { audio_info <- audio_info %>% filter(final1 %in% t_final | final2 %in% t_final | final3 %in% t_final | final4 %in% t_final) }
    if (any(t_tone != '*')) { audio_info <- audio_info %>% filter(tone1 %in% t_tone | tone2 %in% t_tone | tone3 %in% t_tone | tone4 %in% t_tone) }
    if (any(t_initial1 != '*')) { audio_info <- audio_info %>% filter(initial1 %in% t_initial1) }
    if (any(t_final1 != '*')) { audio_info <- audio_info %>% filter(final1 %in% t_final1) }
    if (any(t_tone1 != '*')) { audio_info <- audio_info %>% filter(tone1 %in% t_tone1) }
    if (any(t_initial2 != '*')) { audio_info <- audio_info %>% filter(initial2 %in% t_initial2) }
    if (any(t_final2 != '*')) { audio_info <- audio_info %>% filter(final2 %in% t_final2) }
    if (any(t_tone2 != '*')) { audio_info <- audio_info %>% filter(tone2 %in% t_tone2) }
    if (any(t_initial3 != '*')) { audio_info <- audio_info %>% filter(initial3 %in% t_initial3) }
    if (any(t_final3 != '*')) { audio_info <- audio_info %>% filter(final3 %in% t_final3) }
    if (any(t_tone3 != '*')) { audio_info <- audio_info %>% filter(tone3 %in% t_tone3) }
    if (any(t_initial4 != '*')) { audio_info <- audio_info %>% filter(initial4 %in% t_initial4) }
    if (any(t_final4 != '*')) { audio_info <- audio_info %>% filter(final4 %in% t_final4) }
    if (any(t_tone4 != '*')) { audio_info <- audio_info %>% filter(tone4 %in% t_tone4) }
    if (any(t_nsyllables != '*')) { audio_info <- audio_info %>% filter(n_syllables %in% t_nsyllables) }
    if (any(t_nsyllables != '*')) { audio_info <- audio_info %>% filter(n_syllables %in% t_nsyllables) }
    if (any(t_filter != '*')) { audio_info <- audio_info %>% filter(grepl(t_filter, audio)) }
    if (any(t_pinyin != '*')) { 
        gfilter <- paste(sapply(t_pinyin, py_expr), collapse="|")
        audio_info <- audio_info %>% filter(grepl(gfilter, pinyin))
    }
    if (any(t_pinyin1 != '*')) { 
        gfilter <- paste(sapply(t_pinyin1, py_expr), collapse="|")
        audio_info <- audio_info %>% filter(grepl(gfilter, pinyin1))
    }
    if (any(t_pinyin2 != '*')) {
        gfilter <- paste(sapply(t_pinyin2, py_expr), collapse="|")
        audio_info <- audio_info %>% filter(grepl(gfilter, pinyin2))
    }
    if (any(t_pinyin3 != '*')) {
        gfilter <- paste(sapply(t_pinyin3, py_expr), collapse="|")
        audio_info <- audio_info %>% filter(grepl(gfilter, pinyin3))
    }
    if (any(t_pinyin4 != '*')) {
        gfilter <- paste(sapply(t_pinyin4, py_expr), collapse="|")
        audio_info <- audio_info %>% filter(grepl(gfilter, pinyin4))
    }

    audio_info
}

py_expr <- function(py) {
    if (grepl("[[:digit:]]$", py)) {
        paste0("[^[:lower:]]+", py, "|^", py)
    } else {
        paste0("[^[:lower:]]+", py, "[^[:lower:]]+|^", py, "[^[:lower:]]+")
    }
}

clean_pinyin <- function(pinyin) {
    pinyin <- gsub("eh", "ê", pinyin)
    pinyin <- system(paste("cjknife", "-m", pinyin), intern=TRUE)
    pinyin
}

get_ipa <- function(pinyin) {
    pinyin <- gsub("eh", "ê", pinyin)
    ipa <- system(paste("cjknife", "-s Pinyin", "-t MandarinIPA", "-m", pinyin), intern=TRUE)
}

get_files <- function(audio_dir) {
    # list.files(audio_dir) # Weird error "'translateCharUTF8' must be called on a CHARSXP"
    system(paste("find", audio_dir, "-type f"), intern=TRUE)
}

get_audio_info <- function(audio_dir) {

    if_table <- read.csv(text = if_table_text)

    files <- get_files(audio_dir)
    files <- grep(".txt$|.md$|.rst$", files, value=TRUE, invert=TRUE)
    pinyin <- gsub("(.*)\\..*", "\\1", basename(files))
    pinyin <- str_split(pinyin, '_', n=2, simplify=TRUE)[,1]
    pinyin <- gsub("'", "", tolower(pinyin))
    if (length(pinyin) == 0) {
        no_audio(audio_dir)
    }

    alphas <- str_split(pinyin, '[[:digit:]]', simplify=TRUE)
    alpha1 <- alphas[,1]
    alpha2 <- replace_with_na(alphas,2)
    alpha3 <- replace_with_na(alphas,3)
    alpha4 <- replace_with_na(alphas,4)

    tones <- str_split(pinyin, '[[:lower:]]+', simplify=TRUE)
    tone1 <- tones[,1+1]
    tone2 <- replace_with_na(tones,2+1)
    tone3 <- replace_with_na(tones,3+1)
    tone4 <- replace_with_na(tones,4+1)

    pinyin1 <- paste0(alpha1, tone1)
    pinyin2 <- ifelse(is.na(alpha2), NA, paste0(alpha2, tone2))
    pinyin3 <- ifelse(is.na(alpha3), NA, paste0(alpha3, tone3))
    pinyin4 <- ifelse(is.na(alpha4), NA, paste0(alpha4, tone4))

    n_syllables <- str_count(pinyin, "[[:digit:]]")

    if1 <- left_join(data.frame(ascii=alpha1), if_table, by='ascii')
    initial1 <- if1$initial
    final1 <- if1$final

    if2 <- left_join(data.frame(ascii=as.character(alpha2)), if_table, by='ascii')
    initial2 <- if2$initial
    final2 <- if2$final

    if3 <- left_join(data.frame(ascii=as.character(alpha3)), if_table, by='ascii')
    initial3 <- if3$initial
    final3 <- if3$final

    if4 <- left_join(data.frame(ascii=as.character(alpha4)), if_table, by='ascii')
    initial4 <- if4$initial
    final4 <- if4$final

    deconstruction1 <- paste0(initial1, '-', final1)
    deconstruction2 <- ifelse(is.na(initial2), '', paste0(initial2, '-', final2))
    deconstruction3 <- ifelse(is.na(initial3), '', paste0(initial3, '-', final3))
    deconstruction4 <- ifelse(is.na(initial4), '', paste0(initial4, '-', final4))
    deconstruction5 <- ifelse(n_syllables > 4, "...", "")
    deconstruction <- paste(deconstruction1, deconstruction2, deconstruction3, 
                            deconstruction4, deconstruction5)

    # initial_info <- read.csv("data/initial.csv")
    # final_info <- read.csv("data/final.csv")

    # ipa1 <- paste0(left_join(data.frame(initial=initial1),
    #                          initial_info, by="initial")$ipa,
    #                left_join(data.frame(final=final1),
    #                          final_info, by="final")$ipa)
    # ipa2 <- paste0(left_join(data.frame(initial=initial2),
    #                          initial_info, by="initial")$ipa,
    #                left_join(data.frame(final=final2),
    #                          final_info, by="final")$ipa)
    # ipa <- ifelse(ipa2=="NANA", ipa1, paste0(ipa1, ".", ipa2))
    # ipa <- gsub("\\]|\\[", "", ipa)
    # ipa <- paste0("[", ipa, "]")

    audio_info <- data.frame(pinyin, deconstruction,
                            initial1, final1, tone1, pinyin1,
                            initial2, final2, tone2, pinyin2,
                            initial3, final3, tone3, pinyin3,
                            initial4, final4, tone4, pinyin4,
                            n_syllables, audio=files)
    
}

if_table_text <- "ascii,initial,final
a,',a
er,',ar
ba,b,a
bar,b,ar
pa,p,a
ma,m,a
mar,m,ar
fa,f,a
far,f,ar
da,d,a
ta,t,a
na,n,a
nar,n,ar
la,l,a
ga,g,a
gar,g,ar
ka,k,a
ha,h,a
zha,zh,a
cha,ch,a
char,ch,ar
sha,sh,a
za,z,a
zar,z,ar
ca,c,a
car,c,ar
sa,s,a
e,',e
me,m,e
de,d,e
te,t,e
ter,t,er
ne,n,e
le,l,e
ler,l,er
ge,g,e
ger,g,er
ke,k,e
ker,k,er
he,h,e
her,h,er
zhe,zh,e
zher,zh,er
che,ch,e
she,sh,e
re,r,e
ze,z,e
ce,c,e
se,s,e
yi,',i
yir,',ir
bi,b,i
bir,b,ir
pi,p,i
pir,p,ir
mi,m,i
di,d,i
dir,d,ir
ti,t,i
ni,n,i
li,l,i
lir,l,ir
ji,j,i
qi,q,i
qir,q,ir
xi,x,i
zhi,zh,r
zhir,zh,rr
chi,ch,r
chir,ch,rr
shi,sh,r
shir,sh,rr
ri,r,r
zi,z,z
zir,z,zr
ci,c,z
cir,c,zr
si,s,z
wu,',u
bu,b,u
bur,b,ur
pu,p,u
pur,p,ur
mu,m,u
fu,f,u
fur,f,ur
du,d,u
dur,d,ur
tu,t,u
nu,n,u
lu,l,u
gu,g,u
ku,k,u
hu,h,u
hur,h,ur
zhu,zh,u
zhur,zh,ur
chu,ch,u
shu,sh,u
shur,sh,ur
ru,r,u
zu,z,u
cu,c,u
su,s,u
yu,',v
yur,',vr
nv,n,v
lv,l,v
lvr,l,vr
ju,j,v
qu,q,v
qur,q,vr
xu,x,v
ai,',ai
bai,b,ai
pai,p,ai
pair,p,ar
mai,m,ai
dai,d,ai
dair,d,ar
tai,t,ai
nai,n,ai
lai,l,ai
gai,g,ai
gair,g,ar
kai,k,ai
hai,h,ai
hair,h,ar
zhai,zh,ai
chai,ch,ai
shai,sh,ai
zai,z,ai
cai,c,ai
sai,s,ai
sair,s,ar
ei,',ei
bei,b,ei
beir,b,enr
pei,p,ei
mei,m,ei
meir,m,enr
fei,f,ei
dei,d,ei
nei,n,ei
lei,l,ei
gei,g,ei
hei,h,ei
heir,h,enr
zhei,zh,ei
zei,z,ei
wei,',ui
weir,',unr
dui,d,ui
tui,t,ui
tuir,t,unr
gui,g,ui
kui,k,ui
hui,h,ui
huir,h,unr
zhui,zh,ui
chui,ch,ui
chuir,ch,unr
shui,sh,ui
shuir,sh,unr
rui,r,ui
zui,z,ui
zuir,z,unr
cui,c,ui
sui,s,ui
ao,',ao
bao,b,ao
baor,b,aor
pao,p,ao
paor,p,aor
mao,m,ao
dao,d,ao
daor,d,aor
tao,t,ao
taor,t,aor
nao,n,ao
naor,n,aor
lao,l,ao
gao,g,ao
gaor,g,aor
kao,k,ao
hao,h,ao
haor,h,aor
zhao,zh,ao
zhaor,zh,aor
chao,ch,ao
shao,sh,ao
shaor,sh,aor
rao,r,ao
zao,z,ao
zaor,z,aor
cao,c,ao
sao,s,ao
ou,',ou
pou,p,ou
mou,m,ou
fou,f,ou
dou,d,ou
dour,d,our
tou,t,ou
tour,t,our
nou,n,ou
lou,l,ou
gou,g,ou
gour,g,our
kou,k,ou
kour,k,our
hou,h,ou
hour,h,our
zhou,zh,ou
zhour,zh,our
chou,ch,ou
chour,ch,our
shou,sh,ou
rou,r,ou
zou,z,ou
cou,c,ou
sou,s,ou
you,',iu
your,',iur
miu,m,iu
diu,d,iu
niu,n,iu
niur,n,iur
liu,l,iu
jiu,j,iu
jiur,j,iur
qiu,q,iu
qiur,q,iur
xiu,x,iu
ye,',ie
bie,b,ie
pie,p,ie
mie,m,ie
die,d,ie
tie,t,ie
nie,n,ie
lie,l,ie
jie,j,ie
jier,j,ier
qie,q,ie
xie,x,ie
xier,x,ier
yue,',ve
nve,n,ve
lve,l,ve
jue,j,ve
juer,j,ver
que,q,ve
xue,x,ve
an,',an
ban,b,an
banr,b,ar
pan,p,an
panr,p,ar
man,m,an
fan,f,an
dan,d,an
danr,d,ar
tan,t,an
tanr,t,ar
nan,n,an
lan,l,an
lanr,l,ar
gan,g,an
ganr,g,ar
kan,k,an
kanr,k,ar
han,h,an
zhan,zh,an
chan,ch,an
shan,sh,an
ran,r,an
zan,z,an
can,c,an
san,s,an
en,',en
enr,',enr
ben,b,en
benr,b,enr
pen,p,en
penr,p,enr
men,m,en
menr,m,enr
fen,f,en
fenr,f,enr
nen,n,en
gen,g,en
genr,g,enr
ken,k,en
hen,h,en
zhen,zh,en
zhenr,zh,enr
chen,ch,en
shen,sh,en
shenr,sh,enr
ren,r,en
renr,r,enr
zen,z,en
cen,c,en
sen,s,en
yin,',in
yinr,',ir
bin,b,in
pin,p,in
min,m,in
nin,n,in
lin,l,in
jin,j,in
jinr,j,ir
qin,g,in
xin,x,in
xinr,x,ir
wen,',un
dun,d,un
dunr,d,unr
tun,t,un
nun,n,un
lun,l,un
lunr,l,unr
gun,g,un
gunr,g,unr
kun,k,un
hun,h,un
zhun,zh,un
zhunr,zh,unr
chun,ch,un
chunr,ch,unr
shun,sh,un
run,r,un
zun,z,un
cun,c,un
sun,s,un
yun,',vn
jun,j,vn
qun,g,vn
qunr,g,vr
xun,x,vn
ang,',ang
bang,b,ang
pang,p,ang
mang,m,ang
fang,f,ang
fangr,f,angr
dang,d,ang
dangr,d,angr
tang,t,ang
tangr,t,angr
nang,n,ang
lang,l,ang
gang,g,ang
kang,k,ang
hang,h,ang
zhang,zh,ang
chang,ch,ang
changr,ch,angr
shang,sh,ang
rang,r,ang
rangr,r,angr
zang,z,ang
cang,c,ang
sang,s,ang
beng,b,eng
bengr,b,engr
peng,p,eng
meng,m,eng
feng,f,eng
fengr,f,engr
deng,d,eng
teng,t,eng
neng,n,eng
leng,l,eng
geng,g,eng
gengr,g,engr
keng,k,eng
heng,h,eng
zheng,zh,eng
cheng,ch,eng
chengr,ch,engr
sheng,sh,eng
reng,r,eng
zeng,z,eng
ceng,c,eng
seng,s,eng
ying,',ing
yingr,',ingr
bing,b,ing
ping,p,ing
pingr,p,ingr
ming,m,ing
mingr,m,ingr
ding,d,ing
dingr,d,ingr
ting,t,ing
ning,n,ing
ling,l,ing
lingr,l,ingr
jing,j,ing
jingr,j,ingr
qing,q,ing
qingr,q,ingr
xing,x,ing
xingr,x,ingr
dong,d,ong
dongr,d,ongr
tong,t,ong
tongr,t,ongr
nong,n,ong
long,l,ong
gong,g,ong
kong,k,ong
kongr,k,ongr
hong,h,ong
zhong,zh,ong
zhongr,zh,ongr
chong,ch,ong
chongr,ch,ongr
rong,r,ong
zong,z,ong
cong,c,ong
congr,c,ongr
song,s,ong
ya,',ia
yar,',iar
lia,l,ia
jia,j,ia
jiar,j,iar
qia,q,ia
xia,x,ia
xiar,x,iar
yao,',iao
biao,b,iao
piao,p,iao
piaor,p,iaor
miao,m,iao
miaor,m,iaor
diao,d,iao
diaor,d,iaor
tiao,t,iao
tiaor,t,iaor
niao,n,iao
niaor,n,iaor
liao,l,iao
jiao,j,iao
jiaor,j,iaor
qiao,q,iao
qiaor,q,iaor
xiao,x,iao
xiaor,x,iaor
yan,',ian
yanr,',iar
bian,b,ian
bianr,b,ianr
pian,p,ian
pianr,p,ianr
mian,m,ian
mianr,m,ianr
dian,d,ian
dianr,d,ianr
tian,t,ian
tianr,t,ianr
nian,n,ian
nianr,n,ianr
lian,l,ian
lianr,l,ianr
jian,j,ian
jianr,j,ianr
qian,q,ian
qianr,q,ianr
xian,x,ian
xianr,x,ianr
yang,',iang
yangr,',iangr
niang,n,iang
liang,l,iang
liangr,l,iangr
jiang,j,iang
qiang,q,iang
xiang,x,iang
yong,',iong
jiong,j,iong
qiong,q,iong
xiong,x,iong
xiongr,x,iongr
wa,',ua
gua,g,ua
guar,g,uar
kua,k,ua
hua,h,ua
huar,h,uar
zhua,zh,ua
zhuar,zh,uar
chua,ch,ua
shua,sh,ua
shuar,sh,uar
wo,',uo
wor,',uor
bo,b,uo
po,p,uo
mo,m,uo
mor,m,uor
fo,f,uo
duo,d,uo
tuo,t,uo
tuor,t,uor
nuo,n,uo
luo,l,uo
guo,g,uo
guor,g,uor
kuo,k,uo
huo,h,uo
huor,h,uor
zhuo,zh,uo
chuo,ch,uo
chuor,ch,uor
shuo,sh,uo
shuor,sh,uor
ruo,r,uo
zuo,z,uo
zuor,z,uor
cuo,c,uo
suo,s,uo
wai,',uai
guai,g,uai
kuai,k,uai
kuair,k,uar
huai,h,uai
zhuai,zh,uai
chuai,ch,uai
shuai,sh,uai
wan,',uan
wanr,',uar
duan,d,uan
tuan,t,uan
nuan,n,uan
luan,l,uan
guan,g,uan
guanr,g,uar
kuan,k,uan
kuanr,k,uar
huan,h,uan
zhuan,zh,uan
zhuanr,zh,uar
chuan,ch,uan
shuan,sh,uan
ruan,r,uan
zuan,z,uan
cuan,c,uan
suan,s,uan
wang,',uang
guang,g,uang
kuang,k,uang
huang,h,uang
huangr,h,uangr
zhuang,zh,uang
chuang,ch,uang
chuangr,ch,uangr
shuang,sh,uang
weng,',ueng
wengr,',uengr
yuan,',van
yuanr,',vanr
juan,j,van
juanr,j,vanr
quan,q,van
quanr,q,vanr
xuan,x,van
o,',o
lo,l,o
yo,',io
eh,',eh
m,',m
n,',n
ng,',ng
hng,',hng
hm,',hm"

final_table_text <- 'final,ipa,example,note
a,[a],哪,
ai,[ai̯],带,"Some say pronounced [aɪ]."
an,[an],哪,
ar,[aɚ̯],哪儿,"Also denotes the identical -air, and -anr finals.  Normal pinyin \'er syllable most often pronounced this way."
ang,[aŋ],趟,"Some say pronounced [ɑŋ]."
angr,[ãɚ̯̃],趟儿,"Nasalized \'-ar\'."
ao,[au̯],包,"Some say pronounced [ɑu̯]."
aor,[au̯˞],包儿,
e,[ɤ],这,"Note -e\'s e is a close-mid back vowel [ɤ]."
ei,[ei̯],贝,
en,[ən],本,"Note -en\'s e is a central vowel [ə]."
er,[ɤ˞],这儿,"Denotes when an erhua r is added to an -e final.  Contrast with Pinyin\'s non-erhua -er final [ɚ̯]."
enr,[ɚ̯],本儿,"Also denotes the identical -eir final and how some pronounce normal pinyin \'er syllable.  Contrast with Pinyin\'s erhua -er final when an -r is added to an -e final.  Normal pinyin -er final more commonly pronounced [aɚ̯] like the -ar final."
eng,[əŋ],能,"Note -eng\'s e is a central vowel [ə]."
engr,[ɚ̃],崩儿,"Nasalized \'-er\'."
i,[i],一,"Denotes -i not following c,s,z,ch,sh,zh, or r initials.  With no initial written yi."
z,[ ͡ɯ],子,"Denotes -i following c,s, or z initial.  Other phonetic symbols used are [ɿ], [ź̩], and, [ɨ]."
r,[ ͡ɨ],吃,"Denotes -i following ch,sh,zh, or r initial.  Other phonetic symbols used are [ʅ], [ʐ̩́], and [ɨ]."
ir,[jɚ],鼻儿,"Denotes -ir not following c,s,z,ch,sh,zh, or r initials.  Also denotes the identical  -inr final."
zr,[ ͡ɯɚ],字儿,"Denotes -ir following c,s, or z initials."
rr,[ ͡ɨɚ],事儿,"Denotes -ir following ch,sh,zh, or r initials."
in,[in],品,
ing,[iŋ],平,"With no initial written ying.  Some say ying is pronounced [jəŋ]."
ingr,[jɚ̃],瓶儿,"Nasalized \'-ir\'."
ia,[ja],家,"With no initial written ya."
iar,[jaɚ̯],下儿,"Some say the -iar and -ianr finals are the same."
ian,[jɛn],严,"With no initial written yan.  Some say pronounced [jæn]."
ianr,[jɐɚ̯],点儿,"Some say the -iar and -ianr finals are the same."
iang,[jaŋ],阳,"With no initial written yang.  Some say pronounced [jɑŋ]."
iangr,[jãɚ̯̃],样儿,"Nasalized \'-iar\'."
iao,[jau̯],表,"With no initial written yao.  Some say pronounced [jɑo]."
iaor,[jau̯˞],漂儿,
ie,[je],也,"With no initial written ye."
ier,[jɚ],鞋儿, 
iong,[jʊŋ],熊,"With no initial written yong."
iongr,[jʊ̃˞],熊儿,
iu,[jou̯],牛,"Pronounced -iou.  With no initial written you."
iur,[jou̯˞],牛儿,
ong,[ʊŋ],用,
ongr,[ʊ̃˞],同儿,"Nasalized."
ou,[ou̯],都,
our,[ou̯˞],头儿,
u,[u],语,"With no initial written yu."
ur,[u˞],谱儿,
ua,[wa],娃,"With no initial written wa."
uai,[wai̯],外,"With no initial written wai. Some say pronounced [waɪ]."
uan,[wan],断,"With no initial written wan."
uar,[waɚ̯],瓜儿,"Also denotes the identical -uair and -uanr finals."
uang,[waŋ],王,"With no initial written wang.  Some say pronounced [wɑŋ]."
uangr,[wãɚ̯̃],窗儿,"Nasalized \'-uar\'."
ui,[wei̯],对,"Pronounced -uei.  With no initial written written wei."
un,[wən],盾,"Pronounced -uen.  With no initial written written wen."
unr,[wɚ],棍儿,"Also denotes the identical -uir final."
ueng,[wəŋ],翁,"Only exists in Mandarin with no initial written weng."
uengr,[wɚ̃],瓮儿,"Nasalized -unr\' sound."
uo,[wo],多,"Written as -o after b, p, m, or f.  With no initial written wo."
uor,[wo˞],锅儿,
v,[y],需,"Written -ü or if after j,q, or x as -u.  With no initial written yu."
vn,[yn],群,"Written -ün or if after j,q, or x as -un.  With no initial written yun."
vr,[ɥɚ],驴儿,"Also denotes the identical -ünr finals.  Written  -ür/-ürn or if after j,q, or x as -ur/-urn.  "
ve,[ɥe],月,"Written -üe or if after j,q, or x as -ue.  With no initial written yue."
ver,[ɥɚ],角儿,"Written -üer or if after j,q, or x as -uer."
van,[ɥɛn],元,"Written -üan or if after j,q, or x as -uan.  With no initial written yuan.  Some say pronounced [ɥæn]."
vanr,[ɥɐɚ̯],院儿,"Written -üanr or if after j,q, or x as -uanr."
o,[ɔ],哦,"Used only as an interjection o and in the participle 咯 (lo)."
io,[jɔ],哟,"Used only in interjections.  Written as yo."
eh,[ɛ],欸,"Written in pinyin as ê.  Characters like this also written ai or ei.  Used only as an interjection."
m,[m],呣,"Characters written like this also written mou, mu, or wu.  Consonant syllable used only as an interjection."
n,[n],嗯,"Characters written like this also written en or ng. Consonant syllable used only as an interjection."
ng,[ŋ],嗯,"Characters written like this also written n or en. Consonant syllable used only as an interjection."
hng,[hŋ],哼,"Character written like this also written heng.  Consonant syllable used only as an interjection."
hm,[hm],噷,"Character written like this also written hen or xin.  Consonant syllable used only as an interjection."'

initial_table_text <- 'initial,ipa,example,note
\',[],"也","\'no initial\' initial"
b,[p],"百","unaspirated p"
p,[pʰ],"平","strongly aspirated p"
m,[m],"门",
f,[f],"方",
d,[t],"多","unaspirated t"
t,[tʰ],"台","strongly aspirated t"
n,[n],"那",
l,[l],"里",
g,[k],"高","unaspirated k"
k,[kʰ],"口","strongly aspirated k"
h,[x],"红","roughly like the Scots ch"
j,[t͡ɕ],"军",
q,[t͡ɕʰ],"群",
x,[ɕ],"心",
zh,[ʈ͡ʂ],"只",
ch,[ʈ͡ʂʰ],"吃",
sh,[ʂ],"是",
r,[ɻ],"人","also pronounced [ʐ]"
z,[ts],"子","unaspirated c"
c,[tsʰ],"才",
s,[s],"三",'

main()
